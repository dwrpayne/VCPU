; main board is 8x16, each byte is a cell.
; board runs 0x10000000 to 0x10000080, row order.
; board starts at $s0, runs up to $s1.
; on is 0x23 ('#') for easy printing.
; off is 0x20 (' ') for easy printing.
main:		move 	$s0, $gp		; board pos start.
			li		$s6, 0x100		; working board offset
			addiu	$s1, $s0, 0x080	; board pos end
			li		$s2, 0x20		; off byte
			li		$s3, 0x23		; on byte
			clr		$s7				; generation count in $s7
			li		$t6, 3			; always alive neighbor count
			li		$t7, 2			; alive if already neighbor count
			ori		$a0, $r0, boardstart
			call 	copy_board

; board is filled, start a cycle			
cycle:		call	print_b			
			move	$s5, $s0		; $s5 is the current cell.		
			nop
cell_loop:	lb		$t0, 0($s5)
			addiu	$s5, $s5, 1
			bne		$t0, $s3, cell_loop
			beq		$s5, $s1, done_nb_c
			addiu	$a0, $s5, 0xff				; $a0 holds the parallel cell. add less because we already incremented $s5
			call	add_nb						; now we know this cell is alive
			b		cell_loop
			lb		$t0, 0($s5)
; get all n counts
done_nb_c:	move	$s5, $s0				; $s5 is the current cell addr.				
next_loop:	lb		$v0, 256($s5)			; $v0 is the neighbor count
			sb		$r0, 256($s5)			; clear working board
			addiu	$s5, $s5, 1
			beq		$v0, $t7, next_loop		; if 2 neighbors, next loop. no change.
			beq		$s5, $s1, next_done		; if done, go to end
			beq		$v0, $t6, next_loop   	; =3? alive for sure
			sb		$s3, -1($s5)
			b		next_loop				; definitely dead now.
			sb		$s2, -1($s5)
next_done:	b		cycle						
			addiu	$s7, $s7, 1					
			nop
			nop

; takes the cell in the working board as $a0, and adds 1 around it. Assumes buffer space.
add_nb:		andi	$t8, $a0, 0xf
			beqz	$t8, nb_skipl
			lb		$t1, -17($a0)		; left and up
			lb		$t2, -1($a0)		; left
			lb		$t3, 15($a0)		; left and down
			addiu	$t1, $t1, 1
			addiu	$t2, $t2, 1
			addiu	$t3, $t3, 1
			sb		$t1, -17($a0)		; left and up
			sb		$t2, -1($a0)		; left
			sb		$t3, 15($a0)		; left and down
nb_skipl:	addiu	$t8, $a0, 1
			andi	$t8, $t8, 0xf
			beqz	$t8, nb_skipr
			lb		$t1, -15($a0)		; right and up
			lb		$t2, 1($a0)			; right
			lb		$t3, 17($a0)		; right and down
			addiu	$t1, $t1, 1
			addiu	$t2, $t2, 1
			addiu	$t3, $t3, 1
			sb		$t1, -15($a0)		; right and up
			sb		$t2, 1($a0)		; right
			sb		$t3, 17($a0)		; right and down
nb_skipr:	lb		$t1, -16($a0)		; up
			lb		$t2, 16($a0)			; down
			addiu	$t1, $t1, 1
			addiu	$t2, $t2, 1
			sb		$t1, -16($a0)		; up
			sb		$t2, 16($a0)		; down
			ret
			nop
			
			
			
; copy_board takes the start addr of the new board in $a0, and fills the board with it.
copy_board:	move	$t0, $s0			; $t0 iterates through the current board state mem
copy_loop:	lw		$t1, 0($a0)			; load a word into $t1
			nop
			sw		$t1, 0($t0)			; fill it into the board.
			addiu	$a0, $a0, 4
			bne		$t0, $s1, copy_loop
			addiu	$t0, $t0, 4
			ret
			nop

; print_b knows the board spans $s0 to $s1.
print_b:	push 	$ra							
			call 	newline
			ori		$a0, $r0, generation
			call 	printf
			move	$a0, $s7
			call	print_int
			call 	newline
			move	$t4, $s0		; $t4 iterates the row	
print_row:	addiu	$t5, $t4, 0xf	; $t5 is end of row marker				
			beq		$t4, $s1, print_done
print_cell:	lb		$a0, 0($t4)
			ori		$a0, $a0, 144			; convert 32/35 to 176/178
			andi	$a0, $a0, 0xfffe		; convert 32/35 to 176/178
			call	putch_fast
			bne		$t4, $t5, print_cell
			addiu	$t4, $t4, 1
			call	newline
			b		print_row
			nop
print_done:	pop		$ra
			ret									
			nop				
	


.text
boardbufs: 	.ascii 	"                "
boardstart:	.ascii  "                "
boardrow1:  .ascii 	"                "
boardrow2: 	.ascii 	"           #  # "
boardrow3: 	.ascii 	"          #     "
boardrow4: 	.ascii 	"          #   # "
boardrow5: 	.ascii 	"          ####  "
boardrow6: 	.ascii 	"                "
boardrow7: 	.ascii 	"                "
boardbufe:  .ascii 	"                "
generation: .ascii	"GENERATION "