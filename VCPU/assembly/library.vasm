; sqrt takes number in $a0 and returns in $v0
sqrt:	li		$t5, 1
		sub		$a0, $a0, $t5
		bgtz	$a0, -8
		addiu	$t5, $t5, 2
		srl		$v0, $t5, 1
		ret

; div does $a0 / $a1
; $v0: quotient
; $v1: remainder 
div:		clr		$v0
			clr 	$v1
			li		$t0, 1
div_start:	blt		$t0, $a0, div_start
			sll		$t0, $t0, 1
div_loop:	srl		$t0, $t0, 1
			beqz	$t0, div_end	
			and		$t1, $a0, $t0		; $t1 = N(i)		
			sll		$v1, $v1, 1			
			beqz	$t1, div_no_add
			nop
			addiu	$v1, $v1, 1
div_no_add:	blt		$v1, $a1, div_loop
			nop
			addu	$v0, $v0, $t0
			b		div_loop
			sub		$v1, $v1, $a1
div_end:	ret		

; strcpy takes the src in $a0 and the dest in $a1
strcpy:	lb		$t0, 0($a0)		
		addi	$a0, $a0, 1
		sb		$t0, 0($a1)
		bgtz	$t0, strcpy
		addi	$a1, $a1, 1
		ret

; getch blocks until a char is ready
getch:			li		$t0, 0xffff0000U
getch_check:	lb		$t1, 0($t0)
				beqz	$t1, getch_check
				nop
				lb		$v0, 4($t0)
				ret 

; putch takes the char to output in $a0	
putch:			li		$t0, 0xffff0008U
putch_check:	lb		$t1, 0($t0)
				beqz	$t1, putch_check
				nop
				sb		$a0, 4($t0)				
				ret 
								
; newline just outputs a newline
newline:		push	$ra
				li		$a0, 10			;10 is newline
				call 	putch
				pop		$ra
				ret

; printf takes the address of the string in $a0
printf:			move 	$t2, $a0
				push	$ra
printf_loop:	lb		$a0, 0($t2)		
				call 	putch
				bgtz	$a0, printf_loop
				addi	$t2, $t2, 1
				pop 	$ra
				ret

; itoa takes an int in $a0, and the address to store the string in $a1
itoa:			push	$ra
				clr		$t4					; strlen counter
				bge		$a0, $r0, itoa_pos
				move	$t3, $a1			; str* to $t3
				li		$t0, 45				; 45 is '-'
				sb		$t0, 0($t3)			
				addiu 	$t3, $t3, 1
				subu	$a0, $r0, $a0		; negate
itoa_pos:		li 		$a1, 10				; divisor
				call	div					; now quotient in $v0, remainder in $v1
				push	$v1
				addiu	$t4, $t4, 1
				bgtz	$v0, itoa_pos
				move 	$a0, $v0
itoa_write:		pop		$v1
				addiu	$v1, $v1, 48				; convert to ascii
				sb		$v1, 0($t3)
				addiu	$t4, $t4, -1						
				bgtz	$t4, itoa_write
				addiu	$t3, $t3, 1
				pop		$ra
				sb		$r0, 0($t3)
				ret

;	print_int takes an integer in $a0 and prints it to stdout
;	use a fixed buffer at 0x10003ff0
print_int:		push	$ra
				li		$a1, 0x10003ff0
				call itoa
				brk
				li		$a0, 0x10003ff0
				call printf
				pop		$ra
				ret
