		li	 	$t1, 3				; $t1 holds the number we are testing
next:	addiu	$t1, $t1, 2			; increment number
		move	$a0, $t1			; move number into args register
		call	sqrt				; call sqrt, now $v0 holds the sqrt
		move	$t3, $t1			; $t3 holds the current remainder, starting at $t1
		li 		$t2, 3				; $t2 holds the current subtractor
dec:	bgtz	$t3, dec			; while $t3 > 0, keep subtracting
		subu	$t3, $t3, $t2		; $t3 = $t3 - $t2
		beqz	$t3, next			; if $t3 == 0, composite. next NUMBER
		slt		$at, $v0, $t2		; $at = (sqrt(num) < $t2)) - aka we are done and are prime
		addiu	$t2, $t2, 2			; we know $t3 < 0, next subtractor (if done, stomps $t2 after branch)
		beqz 	$at, dec			; while $t2 < sqrt(num), try again
		subu	$t3, $t1, $t2		; copied from line 3
		subu	$t3, $t3, $t2
		sb		$t1, 0($t8)
		b		next
		addiu	$t8, $t8, 1
sqrt: 	li		$s0, 1
		sub		$a0, $a0, $s0
		bgtz	$a0, -8
		addiu	$s0, $s0, 2
		srl		$v0, $s0, 1
		ret
		nop
		nop
