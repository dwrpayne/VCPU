<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="Wire">
    <DisplayString Condition="!state">{{0 ! {id}}}</DisplayString>
    <DisplayString Condition="state">{{1 ! {id}}}</DisplayString>
  </Type>
  <Type Name="AndGate">
    <DisplayString>{{A={(int)in1->state}, B={(int)in2->state}, out={(int)out.state}}}</DisplayString>
  </Type>
  <Type Name="OrGate">
    <DisplayString>{{A={(int)in1->state}, B={(int)in2->state}, out={(int)out.state}}}</DisplayString>
  </Type>
  <Type Name="NandGate">
    <DisplayString>{{A={(int)and.in1->state}, B={(int)and.in2->state}, out={(int)inv.out.state}}}</DisplayString>
  </Type>
  <Type Name="NorGate">
    <DisplayString>{{A={(int)or.in1->state}, B={(int)or.in2->state}, out={(int)inv.out.state}}}</DisplayString>
  </Type>
  <Type Name="JKFlipFlop">
    <DisplayString>{{J={(int)andj.in1->state}, K={(int)andk.in2->state}, Q={(int)latch.norr.inv.out.state}}}</DisplayString>
  </Type>
  <Type Name="DFlipFlop">
    <DisplayString>{{D={(int)invD.in->state}, E={(int)nandD.and.in2->state}, Q={(int)nandR.inv.out.state}}}</DisplayString>
  </Type>
  <Type Name="FullAdder">
    <DisplayString>{{A={(int)andIn.in1->state}, B={(int)andIn.in2->state}, Cin={(int)andOut.in2->state}, S={(int)xorOut.and.out.state}, Cout={(int)orGate.out.state}}}</DisplayString>
  </Type>
  <Type Name="Register&lt;8&gt;">
    <DisplayString>{{load={(int)bits[0].nandD.and.in2->state}, bits=
{(int)bits[0].nandR.inv.out.state}
{(int)bits[1].nandR.inv.out.state}
{(int)bits[2].nandR.inv.out.state}
{(int)bits[3].nandR.inv.out.state}
{(int)bits[4].nandR.inv.out.state}
{(int)bits[5].nandR.inv.out.state}
{(int)bits[6].nandR.inv.out.state}
{(int)bits[7].nandR.inv.out.state}}}</DisplayString>
  </Type>
  <Type Name="InverterN&lt;*&gt;">
    <DisplayString>{{out={out}}}</DisplayString>
  </Type>
  <Type Name="Multiplexer&lt;2&gt;">
    <DisplayString>{{sel={inv.in,na}, out={orOut.out}}}</DisplayString>
  </Type>
  <Type Name="Multiplexer&lt;4&gt;">
    <DisplayString>{{out={muxOut.orOut.out}}}</DisplayString>
  </Type>
  <Type Name="Multiplexer&lt;8&gt;">
    <DisplayString>{{out={muxOut.muxOut.orOut.out}}}</DisplayString>
  </Type>
  <Type Name="Multiplexer&lt;16&gt;">
    <DisplayString>{{out={muxOut.muxOut.smuxOut.orOut.out}}}</DisplayString>
  </Type>
  <Type Name="Bundle&lt;*&gt;">
    <DisplayString>{{bits={(int)wires[0]->state}{(int)wires[1]->state}{(int)wires[2]->state}{(int)wires[3]->state}{(int)wires[4]->state}{(int)wires[5]->state}{(int)wires[6]->state}{(int)wires[7]->state}}}</DisplayString>
  </Type>
  <Type Name="Bundle&lt;32&gt;">
    <DisplayString>
      {{bits={(int)wires[0]->state}{(int)wires[1]->state}{(int)wires[2]->state}{(int)wires[3]->state}{(int)wires[4]->state}{(int)wires[5]->state}{(int)wires[6]->state}{(int)wires[7]->state}
{(int)wires[8]->state}{(int)wires[9]->state}{(int)wires[10]->state}{(int)wires[11]->state}{(int)wires[12]->state}{(int)wires[13]->state}{(int)wires[14]->state}{(int)wires[15]->state}
{(int)wires[16]->state}{(int)wires[17]->state}{(int)wires[18]->state}{(int)wires[19]->state}{(int)wires[20]->state}{(int)wires[21]->state}{(int)wires[22]->state}{(int)wires[23]->state}
{(int)wires[24]->state}{(int)wires[25]->state}{(int)wires[26]->state}{(int)wires[27]->state}{(int)wires[28]->state}{(int)wires[29]->state}{(int)wires[30]->state}{(int)wires[31]->state}}}
    </DisplayString>
  </Type>
</AutoVisualizer>